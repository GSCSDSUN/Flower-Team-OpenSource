/*
 * Decompiled with CFR 0.150.
 */
package digital.rbq.module.impl.exploit;

import java.util.ArrayDeque;
import java.util.Random;
import me.zane.basicbus.api.annotations.Listener;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C18PacketSpectate;
import digital.rbq.annotations.Label;
import digital.rbq.core.Autumn;
import digital.rbq.events.packet.SendPacketEvent;
import digital.rbq.events.player.MotionUpdateEvent;
import digital.rbq.module.Module;
import digital.rbq.module.ModuleCategory;
import digital.rbq.module.annotations.Category;
import digital.rbq.module.impl.movement.FlightMod;
import digital.rbq.module.impl.movement.LongJumpMod;
import digital.rbq.module.impl.movement.SpeedMod;
import digital.rbq.module.option.impl.EnumOption;
import digital.rbq.utils.Logger;
import digital.rbq.utils.MathUtils;
import digital.rbq.utils.Stopwatch;

@Label(value="Disabler")
@Category(value=ModuleCategory.EXPLOIT)
public final class DisablerMod
extends Module {
    private final ArrayDeque<Packet<?>> packetQueue = new ArrayDeque();
    private final Stopwatch packetStopwatch = new Stopwatch();
    private int i;
    public static final EnumOption<Mode> mode = new EnumOption<Mode>("Mode", Mode.WATCHDOG);

    public DisablerMod() {
        this.setMode(mode);
        this.addOptions(mode);
    }

    @Override
    public void onEnabled() {
        Logger.log("Please relog for the disabler to take affect.");
        this.i = 0;
    }

    @Listener(value=MotionUpdateEvent.class)
    public final void onMotionUpdate(MotionUpdateEvent event) {
        if (mode.getValue() == Mode.GHOSTLY && event.isPre()) {
            mc.getNetHandler().addToSendQueueSilent(new C0CPacketInput());
            mc.getNetHandler().addToSendQueueSilent(new C18PacketSpectate(DisablerMod.mc.thePlayer.getUniqueID()));
        }
        if (mode.getValue() == Mode.WATCHDOG && (FlightMod.getInstance().isEnabled() || Autumn.MANAGER_REGISTRY.moduleManager.getModuleOrNull(SpeedMod.class).isEnabled() || Autumn.MANAGER_REGISTRY.moduleManager.getModuleOrNull(LongJumpMod.class).isEnabled() || DisablerMod.mc.thePlayer.isSpectator())) {
            PlayerCapabilities playerCapabilities = new PlayerCapabilities();
            playerCapabilities.isFlying = true;
            playerCapabilities.allowFlying = true;
            playerCapabilities.setFlySpeed((float)MathUtils.randomNumber(0.1, 9.0));
            mc.getNetHandler().addToSendQueueSilent(new C13PacketPlayerAbilities(playerCapabilities));
        }
    }

    @Listener(value=SendPacketEvent.class)
    public final void onSendPacket(SendPacketEvent event) {
        if (mode.getValue() == Mode.WATCHDOG) {
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction)event.getPacket();
                mc.getNetHandler().addToSendQueueSilent(new C0FPacketConfirmTransaction(Integer.MAX_VALUE, packetConfirmTransaction.getUid(), false));
                event.setCancelled();
            }
            if (event.getPacket() instanceof C00PacketKeepAlive) {
                mc.getNetHandler().addToSendQueueSilent(new C00PacketKeepAlive(Integer.MIN_VALUE + new Random().nextInt(100)));
                event.setCancelled();
            }
        }
        if (mode.getValue() == Mode.FAITHFUL && DisablerMod.mc.thePlayer != null && DisablerMod.mc.thePlayer.getDistance(DisablerMod.mc.thePlayer.prevPosX, DisablerMod.mc.thePlayer.prevPosY, DisablerMod.mc.thePlayer.prevPosZ) > 0.6 && event.getPacket() instanceof C03PacketPlayer) {
            if (this.i > 2) {
                mc.getNetHandler().addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(DisablerMod.mc.thePlayer.prevPosX + (DisablerMod.mc.thePlayer.posX - DisablerMod.mc.thePlayer.prevPosX) / 2.0, DisablerMod.mc.thePlayer.prevPosY + (DisablerMod.mc.thePlayer.posY - DisablerMod.mc.thePlayer.prevPosY) / 2.0, DisablerMod.mc.thePlayer.prevPosZ + (DisablerMod.mc.thePlayer.posZ - DisablerMod.mc.thePlayer.prevPosZ) / 2.0, true));
                this.i = 0;
            } else {
                event.setCancelled();
                mc.getNetHandler().addToSendQueueSilent(new C00PacketKeepAlive(Integer.MIN_VALUE));
            }
            ++this.i;
        }
    }

    private static enum Mode {
        WATCHDOG,
        GHOSTLY,
        FAITHFUL;

    }
}

